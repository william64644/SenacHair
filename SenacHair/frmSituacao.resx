<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAADAAAAFU5LSFUbGxtIAAAAMgAAACIAAAASAAAABwAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAGDfXVNo5qT/qigmPuDfHrHWFRSgQoKC0EAAAAhAAAADQAAAAMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAEAAAABAAAAAj9AQBaMgnrp//Xq//Dm2//Du7L+jYeB3k1JSHQAAAAwAAAAEQAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAABQAAAAkAAAAMAAAADgAAABAAAAARAAAAF4F9eZve1c3/9urg//Xr3v/w5Nn/raWf/XJu
        a50AAAA5AAAAEAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAAEAAAACgAAABMAAAAfAAAAKgAAADMAAAA5CwsLQBISD0MMDAlEbGZkjdHJv//27OL/9Orf//Ln
        3P/16t3/vbWs/nhxbaUAAAA1AAAACwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAADAAAACwAAABkAAAArGxgYQ1hVUHNwbGSkf3pxzJWMg+yakon7n5aN/pmRifyLhX3649nO//Hn
        3f/06t//9Ovf//Dl2v/z5tn/samg/l1YVYMAAAAlAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAABAAAABgAAABQAAAArQTw5WHRuZa2SjIL2uK6j/9bLwP/u5Nf/9Org//Xs4v/37uT/+O/n//nw
        5f/38Of/8+ne//Xr4f/47uT/9Ojd/+3i1v/r4NP/j4mC7hsYGEkAAAAOAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAgAAAAcIx8gQXNsZKqck4n90se7/+/l2f/x6N//8uvi//Hp3//x6N7/8ejf//Pr
        4f/26+P/+O/n//nw6f/37eT/+e/l//ft4//17OL/7uTY/+ve0f/Atqv/X1pWiQAAACYAAAAGAAAAAQAA
        AAAAAAAAAAAAAAAAAAEAAAAIAAAAHkhHQl2De3Hmxrut/+zi1v/u5tz/6+PY/+rf0//q3tL/6d7S/+zg
        1v/u5Nn/8Obb//Lo3f/16+H/9uzi//Xr4f/17OL/+e/l//ju5P/16t//7OHV/9zRwv9yamfQEREOTQAA
        ABoAAAAGAAAAAQAAAAAAAAAAAAAABQAAABpSTkdmjIN69tvQwP/r4df/59/T/+TZy//m2s3/6d7R/+TZ
        zv+1rqP/urCo/7qyqv+9taz/vbWv/8C4r//CuLD/wLiw/87EvP/68Of/+O7k//bs4f/y6N3/8ene/8K4
        qv91bWTRGhgYUQAAABgAAAAFAAAAAAAAAAIAAAARR0I8U4mAd/Tcz8H/6d/U/+HVyP/h1cb/49fK/+ba
        zP/r39T/ybKW/6pnEf+tbRj/rW0Y/6xtGP+sbRj/rG0Y/61tGP+tbRb/oWsj//v07f/16+H/9eng//Dm
        2//u5Nn/8Ofd/8i8r/9yamHPEA0NRQAAABEAAAACAAAACBgREip5cmja0cS1/+bc0f/c0MH/3dHC/+DU
        xf/i1sn/5dnM/+nf0//Mt5//pG4n/6VtIf+1dyT/tXck/7R3JP+1dyT/rnAf/6ZxK/+idjv/+vLq//Tp
        4P/y6dz/7+bZ/+vg1P/n3M//6uHW/7itnv9jXVWqAAAAMAAAAAgAAAAPZF1Uhqygkv/i2Mv/2cy9/9nN
        vf/cz8D/3tLE/+HVx//j2Mr/59rN/+rh1P/w6OD/3NDB/6JmFf+sciH/rHEh/6xxH/+vh1P//Pby//jv
        5//y6d//8efd//Dl2//t4tb/6t/S/+XazP/h1sj/5NnL/5SKfv49OTVoAAAAFwkJCR17cmjl18u6/9nO
        v//VyLf/2Mu7/9rOvv/d0MP/39PF/+LWyP/k2Mv/5tvN/+nf0v/f08X/mV4Q/6VrHv+lax7/pWka/66K
        Wv/07eP/8Oba//Dl2f/v5Nj/7eLW/+vg0//p3M//5djK/97SxP/e08X/yrys/2tlW8AAAAAvT0lEUZqP
        gf/az8D/0MKx/9PFtf/Vybj/2Mu7/9vOv//d0cL/4NXF/+LWyP/k2Mv/6NvP/9zPwP+TWg//oGgd/6Bo
        Hf+gZhn/qYVW//Hp3//t4tb/7eLX/+vg1P/q39L/6dzP/+XZzf/h1cj/3NDB/9fKuv/azb7/ioB1/CEe
        G01eV09/raGQ/9XIuP/Nv63/0MKx/9PGtf/WyLj/2Mu9/9vOv//d0cH/39PE/+HVx//k2cz/2c29/5BZ
        E/+eaCL/nWgi/51nH/+lg1X/7+Xb/+re0v/p3tH/6NzP/+bbzf/k2Mv/4dXH/97Tw//bzb3/1Me3/9XI
        tv+kl4j/SEE6d2NbUZa5q5r/zb+s/8q8qv/NwK7/0MOx/9PFtP/VyLj/2Mu7/9rNvv/c0MD/39PE/+TY
        yf/Xyrv/jFkX/5toJ/+aaCf/mmcl/6N/VP/q4NX/5trN/+XZzP/k2Mr/4tbK/+DUxv/d0cL/2s6+/9bJ
        uf/RxLP/zsGv/7Kkkv9VTUWUZFxQl7msm//OwbD/yLqo/8q8qv/Nv63/0cKw/9LEs//Ux7f/1sq7/9rM
        vf/Yzb3/urGm/6ufk/+NXB7/l2ks/5dpLP+XaCr/nn5T/+fd0f/j18n/4dXI/+HTxf/e0sP/3M/A/9nN
        vf/Wybn/0sW0/87Arv/Owa//tKeV/1ZRSJlgWU+Cqp2L/9HFtP/QxLT/y72s/8m7qf/Mvqz/zsCv/9HD
        sv/TxrX/18u6/7mmkP+EYDH/hV4r/5hrMv+XbDT/lmsz/5ZrMv+be1P/4dfK/93Qwv/c0ML/286//9nN
        vf/Xyrr/1ce3/9HEs//Owa//0MS0/9PJuf+sn4v/V1BFlFpVSlSThnb/0MW0/9DGt//TyLr/0sa2/8u+
        rP/KvKn/zb+t/8/Br//Uxbb/rpmA/4pgKv+PaDT/j2g0/5FpNf+RaTb/kWgz/5FySv/e0sP/2Mu7/9fM
        uv/Wybj/1Me2/9LFtP/QwrD/0sW1/9bMvv/Vyrz/0sa2/5qNfP9KQzt3NDUnFHVqXPPLvqv/08e4/9TI
        uv/Uyrz/2M7B/9XMvf/Qw7P/zL2r/8y+rP/Ku6j/va6a/8Cynv+mmYr/lYl5/4+CcP+dk4b/wrSj/9XI
        t//TxrX/0sSy/9HCsf/RxLP/1cm6/9rRw//a0cT/1szA/9TKvP/Mvqz/gHVl/i0lIkYAAAADaFxQmqSV
        gv/VzL3/08m7/9XLvv/WzcD/2M7D/9rRxP/c08f/2c/D/9XLvf/Wyrr/u7Kl/4pmN/+kaRr/q24d/5Vj
        If+ainb/1cm7/9XKu//YzcD/3NTH/9/Wyv/d1Mn/2tHE/9jPwv/WzL//182//7SlkP9lXE/FAAAAIgAA
        AABbU0Ehb2RU8ce5pv/XzsD/18y//9fOwf/Yz8P/2tHF/9vSxv/c08f/3tXK/+Lc0/+eg2D/qGsY/6ls
        Hv+obB7/qm0d/4pYFf/g2dH/4dnO/9/XzP/d1cv/3tTI/9vTx//a0cX/2M/D/9jPw//MwK7/gHNh/kc/
        OGAAAAAMAAAAAAAAAAJqX09mf3Jf/tHGtv/Y0MX/2M/D/9nRxf/a0sb/29PI/9zUyf/d1cr/4d3U/5Fv
        Qv+bZRz/nWol/55qJf+eaST/g08H/9LLwf/g2M3/3tbL/93Vyv/c1Mn/29PI/9rSxv/a0sb/1cy+/5eJ
        dP9cUkarAAAAHQAAAAAAAAAAAAAAAAAAAAJoXU6QhHVi/tHIuf/c1cr/2tLH/9vTyf/c1Mr/3dXL/97W
        zP/g2tH/uKuZ/4dbIP+ccTj/nHE4/5tuNP+JbEb/5eDX/9/Xzf/e183/3tbM/93Vy//c1Mn/3NbL/9jP
        wf+ejnn/XlZF0B0XESwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAANnXEyKdmpX/sS4pv/i29H/39jO/93W
        zf/e183/39jO/9/az//k39f/wriq/5qCZv+XfV7/qZmD/+Te1//h2tH/4NnQ/9/Yz//e2M7/39nP/+Hb
        0//Sx7j/kIFs/1xURc8oIh0zAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFiWktbZlpH7ZmL
        dv/Vy73/5uDZ/+Pe1f/h3NT/4drS/+Hb0v/j3tf/5uHa/+bi2v/m4Nj/49zU/+Hb0//i3NP/49zV/+Tg
        2P/e1sv/tKSR/3RnU/5YT0CnHBUWJAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABXTEEaXlFEnGlcSPmThHH/x7qq/9/Yzv/q5d7/6OXd/+jj2//o4tz/6OLc/+ji3P/p497/6uXe/+bg
        1//SyLn/qp2H/3lqVP5fVETVSkE2XAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAABW1E/H1tRQoNfVEHYbWBM/oN0YP+ekX7/sKSS/7uwnv+9sZ//tqqX/6ia
        h/+RgW3/dmhR/2VXRvVWTD6yTkY4XAAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFeTj4kWks/X1dNOolVSzylV0w7t1dM
        PLhVSzqwVUg6nFJIOXtLQDNNKSkaFQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//4A///+AH//+AA//4AAH/wAAA/4AAAP4AAAB8AAAAOAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAABwAAAAeAA
        AAPwAAAH/AAAH/4AAH//wAH///////////8=
</value>
  </data>
</root>